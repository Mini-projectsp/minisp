package com.mproject.railroute;

import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Color;
import android.location.Address;
import android.location.Geocoder;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.mproject.unique.AsyncClass;
import com.mproject.unique.DirectionsJSONParser;
import com.mproject.unique.JSONParser;
import com.mproject.unique.ListAdapter;
import com.mproject.unique.Product;
import com.mproject.unique.ServiceHandler;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;


/**
 * Created by boss on 16-11-2015.
 */
public class DrawRoute extends FragmentActivity {
    GoogleMap map;
    ArrayList markerPoints;
    GoogleMapOptions options = new GoogleMapOptions();
    TextView start,end;
    static ArrayList<Product> products = new ArrayList<Product>();
    ListAdapter boxAdapter;
    ListView listview_trains;
    AsyncClass async;
    ProgressDialog pdialog;
    String tempp,url;
    JSONParser jsonParser;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getID();
        fillDataInListViewTrain();
        listview_trains.setAdapter(boxAdapter);

// Initializing
        markerPoints = new ArrayList();

// Getting reference to SupportMapFragment of the activity_main
        SupportMapFragment fm = (SupportMapFragment)getSupportFragmentManager().findFragmentById(R.id.map);

// Getting Map for the SupportMapFragment
        map = fm.getMap();

        if(map!=null){

// Enable MyLocation Button in the Map
            map.setMyLocationEnabled(true);
            options.compassEnabled(true)
                    .scrollGesturesEnabled(true)
                    .rotateGesturesEnabled(true);




// Setting onclick event listener for the map
            map.setOnMapClickListener(new OnMapClickListener() {

                @Override
                public void onMapClick(LatLng point) {
                    Log.e("latlondddddd",point+"");

                    String a = String.valueOf(point);
                   String temp[] =  a.split(",");

                        String lat = temp[0];
                        String long1 = temp[1];
                        Log.e("dfsadfdsffdasf","lat"+lat+"  "+"long"+long1);
                    url = "http://maps.googleapis.com/maps/api/geocode/json?latlng="+lat+","+long1+"&sensor=true";
                    url = "http://maps.googleapis.com/maps/api/geocode/json?latlng=30.76666,76.335421&sensor=true";

                    new GetStationName().execute();






// Already two locations
                    if (markerPoints.size() > 1) {
                        markerPoints.clear();
                        map.clear();
                    }
                    // Adding new item to the ArrayList
                    markerPoints.add(point);

// Creating MarkerOptions
                    MarkerOptions options = new MarkerOptions();

// Setting the position of the marker
                    options.position(point);

/**
 * For the start location, the color of marker is GREEN and
 * for the end location, the color of marker is RED.
 */
                    if (markerPoints.size() == 1) {
                        options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN)).title("Start Point");
                    } else if (markerPoints.size() == 2) {
                        options.icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)).title("Destination");
                    }

// Add new marker to the Google Map Android API V2
                    map.addMarker(options);

// Checks, whether start and end locations are captured
                    if (markerPoints.size() >= 2) {
                        LatLng origin = (LatLng) markerPoints.get(0);
                        LatLng dest = (LatLng) markerPoints.get(1);

// Getting URL to the Google Directions API
                        String url = getDirectionsUrl(origin, dest);

                        DownloadTask downloadTask = new DownloadTask();

// Start downloading json data from Google Directions API
                        downloadTask.execute(url);
                    }

                }
            });
        }
    }

//    method for getting refernce id of all UI components

    public void getID()
    {
        start               = (TextView) findViewById(R.id.startpoint);
        end                 = (TextView) findViewById(R.id.destination);
        listview_trains     = (ListView) findViewById(R.id.listview_trains);
        boxAdapter          = new ListAdapter(this, products);
    }


//    method for load data into listview of trains

    public void fillDataInListViewTrain()
    {
        for(int i = 0; i<10 ; i++)
        {
            products.add(new Product("KalKa Express"+i,"Kalka","New Delhi"));
        }

    }


    private String getDirectionsUrl(LatLng origin,LatLng dest){

// Origin of route
        String str_origin = "origin="+origin.latitude+","+origin.longitude;

// Destination of route
        String str_dest = "destination="+dest.latitude+","+dest.longitude;

// Sensor enabled
        String sensor = "sensor=false";

// Building the parameters to the web service
        String parameters = str_origin+"&"+str_dest+"&"+sensor;

// Output format
        String output = "json";

// Building the url to the web service
        String url = "https://maps.googleapis.com/maps/api/directions/"+output+"?"+parameters;

        return url;
    }

    /** A method to download json data from url */
    private String downloadUrl(String strUrl) throws IOException{
        String data = "";
        InputStream iStream = null;
        HttpURLConnection urlConnection = null;
        try{
            URL url = new URL(strUrl);

// Creating an http connection to communicate with url
            urlConnection = (HttpURLConnection) url.openConnection();

// Connecting to url
            urlConnection.connect();

// Reading data from url
            iStream = urlConnection.getInputStream();

            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));

            StringBuffer sb = new StringBuffer();

            String line = "";
            while( ( line = br.readLine()) != null){
                sb.append(line);
            }

            data = sb.toString();

            br.close();

        }catch(Exception e){
            Log.d("Exception while downloading url", e.toString());
        }finally{
            iStream.close();
            urlConnection.disconnect();
        }
        return data;
    }

    // Fetches data from url passed
    private class DownloadTask extends AsyncTask<String, Void, String>{

        // Downloading data in non-ui thread
        @Override
        protected String doInBackground(String... url) {

// For storing data from web service
            String data = "";

            try{
// Fetching the data from web service
                data = downloadUrl(url[0]);
            }catch(Exception e){
                Log.d("Background Task",e.toString());
            }
            return data;
        }

        // Executes in UI thread, after the execution of
// doInBackground()
        @Override
        protected void onPostExecute(String result) {
            super.onPostExecute(result);

            ParserTask parserTask = new ParserTask();

// Invokes the thread for parsing the JSON data
            parserTask.execute(result);

        }
    }

    /** A class to parse the Google Places in JSON format */
    private class ParserTask extends AsyncTask<String, Integer, List<List<HashMap<String,String>>> >{

        // Parsing the data in non-ui thread
        @Override
        protected List<List<HashMap<String, String>>> doInBackground(String... jsonData) {

            JSONObject jObject;
            List<List<HashMap<String, String>>> routes = null;

            try{
                jObject = new JSONObject(jsonData[0]);
                DirectionsJSONParser parser = new DirectionsJSONParser();

// Starts parsing data
                routes = parser.parse(jObject);
            }catch(Exception e){
                e.printStackTrace();
            }
            return routes;
        }

        // Executes in UI thread, after the parsing process
        @Override
        protected void onPostExecute(List<List<HashMap<String, String>>> result) {
            ArrayList points = null;
            PolylineOptions lineOptions = null;
            MarkerOptions markerOptions = new MarkerOptions();

// Traversing through all the routes
            for(int i=0;i<result.size();i++){
                points = new ArrayList();
                lineOptions = new PolylineOptions();

// Fetching i-th route
                List<HashMap<String, String>> path = result.get(i);

// Fetching all the points in i-th route
                for(int j=0;j <path.size();j++){
                    HashMap<String,String> point = path.get(j);

                    double lat = Double.parseDouble(point.get("lat"));
                    double lng = Double.parseDouble(point.get("lng"));
                    LatLng position = new LatLng(lat, lng);

                    points.add(position);
                }

// Adding all the points in the route to LineOptions
                lineOptions.addAll(points);
                lineOptions.width(2);
                lineOptions.color(Color.RED);

            }

// Drawing polyline in the Google Map for the i-th route
            if(lineOptions !=null) {
                map.addPolyline(lineOptions);
            }
            else
            {
                Toast.makeText(getApplicationContext(),"Please Tap At Valid Postion", Toast.LENGTH_LONG).show();

            }
        }
    }

    private class ReverseGeocodingTask extends AsyncTask<LatLng, Void, String>{
        Context mContext;

        public ReverseGeocodingTask(Context context){
            super();
            mContext = context;
        }

        // Finding address using reverse geocoding
        @Override
        protected String doInBackground(LatLng... params) {
            Geocoder geocoder = new Geocoder(mContext);
            double latitude = params[0].latitude;
            double longitude = params[0].longitude;

            List<Address> addresses = null;
            String addressText="";

            try {
                addresses = geocoder.getFromLocation(latitude, longitude, 1);
            } catch (IOException e) {
                e.printStackTrace();
            }

            if(addresses != null && addresses.size() > 0 ){
                Address address = addresses.get(0);

                addressText = String.format("%s, %s, %s",
                        address.getMaxAddressLineIndex() > 0 ? address.getAddressLine(0) : "",
                        address.getLocality(),
                        address.getCountryName());
            }

            return addressText;
        }

        @Override
        protected void onPostExecute(String addressText) {
            // Setting the title for the marker.
            // This will be displayed on taping the marker
//            markerOptions.title(addressText);
            start.setText(addressText);

            // Placing a marker on the touched position
//            googleMap.addMarker(markerOptions);

        }
    }

   private class GetStationName extends AsyncTask<String, String, JSONObject> {

        /**
         * Before starting background thread Show Progress Dialog
         **/
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            pdialog = new ProgressDialog(DrawRoute.this);
            pdialog.setMessage("Loading...");
            pdialog.setIndeterminate(false);
            pdialog.setCancelable(true);
            pdialog.show();
        }

        /**
         * Getting product details in background thread
         * @return
         * */
        protected JSONObject doInBackground(String... params) {


            Log.d("Single user Details", url);
            JSONObject jobj = null;
            try {

                ServiceHandler sh = new ServiceHandler();

                // Making a request to url and getting response
               String jsonStr = sh.makeServiceCall(url, ServiceHandler.GET);

                Log.d("Response: ", "> " + jsonStr);

            jobj = new JSONObject(jsonStr);



            } catch (Exception e) {
                e.printStackTrace();
            }
            return jobj;
        }


        protected void onPostExecute(JSONObject user) {


            if(user!=null) {

//                JSONObject jobject = user.optJSONObject("results");

                JSONArray jarray = user.optJSONArray("results");
                Log.e("dfdasfsadfads",jarray+"");
                JSONArray jarray1 = jarray.optJSONArray(Integer.parseInt("address_components"));
                for(int i=0;i<jarray1.length();i++)
                {

                    JSONObject jsonObject = jarray.optJSONObject(i);
                    String country_name = jsonObject.optString("long_name");
Log.e("dfdasfsadfads",country_name);
                }


                pdialog.dismiss();
            }
            else
            {
                Toast.makeText(getApplicationContext(), "No Data", 10).show();
                pdialog.dismiss();
            }
        }

    }

}

